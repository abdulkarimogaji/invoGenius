// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package db

import (
	"context"
	"database/sql"
	"time"

	"github.com/abdulkarimogaji/invoGenius/utils/types"
)

const createInvoice = `-- name: CreateInvoice :execresult
INSERT INTO invoice (user_id, amount, vat, type, issued_at, from_date, until_date, created_at, updated_at, currency, deadline, created_by) VALUES (?,?,?,?,?,?,?,?,?,?,?,?)
`

type CreateInvoiceParams struct {
	UserID    int32     `json:"user_id"`
	Amount    float64   `json:"amount"`
	Vat       float64   `json:"vat"`
	Type      string    `json:"type"`
	IssuedAt  time.Time `json:"issued_at"`
	FromDate  time.Time `json:"from_date"`
	UntilDate time.Time `json:"until_date"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
	Currency  string    `json:"currency"`
	Deadline  time.Time `json:"deadline"`
	CreatedBy int32     `json:"created_by"`
}

func (q *Queries) CreateInvoice(ctx context.Context, arg CreateInvoiceParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createInvoice,
		arg.UserID,
		arg.Amount,
		arg.Vat,
		arg.Type,
		arg.IssuedAt,
		arg.FromDate,
		arg.UntilDate,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Currency,
		arg.Deadline,
		arg.CreatedBy,
	)
}

const createInvoiceActivity = `-- name: CreateInvoiceActivity :execresult
INSERT INTO invoice_activity (user_id, invoice_id, action_type, resource_id, created_at, updated_at, attachment) VALUES (?,?,?,?,?,?,?)
`

type CreateInvoiceActivityParams struct {
	UserID     int32                `json:"user_id"`
	InvoiceID  int32                `json:"invoice_id"`
	ActionType string               `json:"action_type"`
	ResourceID int32                `json:"resource_id"`
	CreatedAt  time.Time            `json:"created_at"`
	UpdatedAt  time.Time            `json:"updated_at"`
	Attachment types.JSONNullString `json:"attachment"`
}

func (q *Queries) CreateInvoiceActivity(ctx context.Context, arg CreateInvoiceActivityParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createInvoiceActivity,
		arg.UserID,
		arg.InvoiceID,
		arg.ActionType,
		arg.ResourceID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Attachment,
	)
}

const createUser = `-- name: CreateUser :execresult
INSERT INTO user (first_name, last_name, role, email, password, phone, created_at, updated_at) VALUES (?,?,?,?,?,?,?,?)
`

type CreateUserParams struct {
	FirstName string               `json:"first_name"`
	LastName  string               `json:"last_name"`
	Role      string               `json:"role"`
	Email     string               `json:"email"`
	Password  types.JSONNullString `json:"password"`
	Phone     string               `json:"phone"`
	CreatedAt time.Time            `json:"created_at"`
	UpdatedAt time.Time            `json:"updated_at"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createUser,
		arg.FirstName,
		arg.LastName,
		arg.Role,
		arg.Email,
		arg.Password,
		arg.Phone,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
}

const getCustomers = `-- name: GetCustomers :many
SELECT 
    u.id, 
    u.first_name, 
    u.last_name, 
    u.status, 
    u.email, 
    u.phone,
    u.created_at, 
    COALESCE(inv.currency, '') AS currency,
    COUNT(inv.id) AS number_of_invoices, 
    CAST(COALESCE(SUM(inv.total_amount), 0) AS SIGNED) AS total_billed, 
    CAST(COALESCE(SUM(inv.amount_paid), 0) AS SIGNED) AS total_collected
FROM user u
LEFT JOIN (
    SELECT 
        i.id,
        i.currency, 
        i.user_id, 
        (i.amount + (i.amount * i.vat * 0.01)) AS total_amount, 
        COALESCE(SUM(t.amount), 0) AS amount_paid
    FROM invoice i
    LEFT JOIN transaction t 
        ON t.invoice_id = i.id
    GROUP BY i.id
) inv ON inv.user_id = u.id
WHERE u.role = 'customer'
  AND (? IS NULL OR u.id = ?)
  AND (? IS NULL OR u.first_name LIKE CONCAT('%', ?, '%'))
  AND (? IS NULL OR u.last_name LIKE CONCAT('%', ?, '%'))
  AND (? IS NULL OR u.email LIKE CONCAT('%', ?, '%'))
  AND (? IS NULL OR u.phone LIKE CONCAT('%', ?, '%'))
GROUP BY 
    u.id, u.first_name, u.last_name, u.status, u.email, u.phone, u.created_at, inv.currency
ORDER BY
    CASE WHEN ? = 'id' AND ? = 'asc' THEN u.id END ASC,
    CASE WHEN ? = 'id' AND ? = 'desc' THEN u.id END DESC,
    CASE WHEN ? = 'first_name' AND ? = 'asc' THEN u.first_name END ASC,
    CASE WHEN ? = 'first_name' AND ? = 'desc' THEN u.first_name END DESC,
    CASE WHEN ? = 'last_name' AND ? = 'asc' THEN u.last_name END ASC,
    CASE WHEN ? = 'last_name' AND ? = 'desc' THEN u.last_name END DESC,
    CASE WHEN ? = 'status' AND ? = 'asc' THEN u.status END ASC,
    CASE WHEN ? = 'status' AND ? = 'desc' THEN u.status END DESC,
    CASE WHEN ? = 'email' AND ? = 'asc' THEN u.email END ASC,
    CASE WHEN ? = 'email' AND ? = 'desc' THEN u.email END DESC,
    CASE WHEN ? = 'phone' AND ? = 'asc' THEN u.phone END ASC,
    CASE WHEN ? = 'phone' AND ? = 'desc' THEN u.phone END DESC,
    CASE WHEN ? = 'updated_at' AND ? = 'asc' THEN u.updated_at END ASC,
    CASE WHEN ? = 'updated_at' AND ? = 'desc' THEN u.updated_at END DESC,
    CASE WHEN ? = 'created_at' AND ? = 'asc' THEN u.created_at END ASC,
    CASE WHEN ? = 'created_at' AND ? = 'desc' THEN u.created_at END DESC
`

type GetCustomersParams struct {
	CustomerID sql.NullInt32 `json:"customer_id"`
	FirstName  interface{}   `json:"first_name"`
	LastName   interface{}   `json:"last_name"`
	Email      interface{}   `json:"email"`
	Phone      interface{}   `json:"phone"`
	SortBy     interface{}   `json:"sort_by"`
	SortOrder  interface{}   `json:"sort_order"`
}

type GetCustomersRow struct {
	ID               int32     `json:"id"`
	FirstName        string    `json:"first_name"`
	LastName         string    `json:"last_name"`
	Status           string    `json:"status"`
	Email            string    `json:"email"`
	Phone            string    `json:"phone"`
	CreatedAt        time.Time `json:"created_at"`
	Currency         string    `json:"currency"`
	NumberOfInvoices int64     `json:"number_of_invoices"`
	TotalBilled      int64     `json:"total_billed"`
	TotalCollected   int64     `json:"total_collected"`
}

func (q *Queries) GetCustomers(ctx context.Context, arg GetCustomersParams) ([]GetCustomersRow, error) {
	rows, err := q.db.QueryContext(ctx, getCustomers,
		arg.CustomerID,
		arg.CustomerID,
		arg.FirstName,
		arg.FirstName,
		arg.LastName,
		arg.LastName,
		arg.Email,
		arg.Email,
		arg.Phone,
		arg.Phone,
		arg.SortBy,
		arg.SortOrder,
		arg.SortBy,
		arg.SortOrder,
		arg.SortBy,
		arg.SortOrder,
		arg.SortBy,
		arg.SortOrder,
		arg.SortBy,
		arg.SortOrder,
		arg.SortBy,
		arg.SortOrder,
		arg.SortBy,
		arg.SortOrder,
		arg.SortBy,
		arg.SortOrder,
		arg.SortBy,
		arg.SortOrder,
		arg.SortBy,
		arg.SortOrder,
		arg.SortBy,
		arg.SortOrder,
		arg.SortBy,
		arg.SortOrder,
		arg.SortBy,
		arg.SortOrder,
		arg.SortBy,
		arg.SortOrder,
		arg.SortBy,
		arg.SortOrder,
		arg.SortBy,
		arg.SortOrder,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetCustomersRow
	for rows.Next() {
		var i GetCustomersRow
		if err := rows.Scan(
			&i.ID,
			&i.FirstName,
			&i.LastName,
			&i.Status,
			&i.Email,
			&i.Phone,
			&i.CreatedAt,
			&i.Currency,
			&i.NumberOfInvoices,
			&i.TotalBilled,
			&i.TotalCollected,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDefaultCurrency = `-- name: GetDefaultCurrency :one
SELECT setting_value FROM setting WHERE setting_key = 'currency'
`

func (q *Queries) GetDefaultCurrency(ctx context.Context) (string, error) {
	row := q.db.QueryRowContext(ctx, getDefaultCurrency)
	var setting_value string
	err := row.Scan(&setting_value)
	return setting_value, err
}

const getDefaultVAT = `-- name: GetDefaultVAT :one
SELECT setting_value FROM setting WHERE setting_key = 'vat'
`

func (q *Queries) GetDefaultVAT(ctx context.Context) (string, error) {
	row := q.db.QueryRowContext(ctx, getDefaultVAT)
	var setting_value string
	err := row.Scan(&setting_value)
	return setting_value, err
}

const getInvoiceSettings = `-- name: GetInvoiceSettings :many
SELECT setting_key, setting_value FROM setting WHERE setting_key IN ('currency', 'vat', 'deadline_days')
`

type GetInvoiceSettingsRow struct {
	SettingKey   string `json:"setting_key"`
	SettingValue string `json:"setting_value"`
}

func (q *Queries) GetInvoiceSettings(ctx context.Context) ([]GetInvoiceSettingsRow, error) {
	rows, err := q.db.QueryContext(ctx, getInvoiceSettings)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetInvoiceSettingsRow
	for rows.Next() {
		var i GetInvoiceSettingsRow
		if err := rows.Scan(&i.SettingKey, &i.SettingValue); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getInvoices = `-- name: GetInvoices :many
SELECT 
  inv.id, 
  inv.amount, 
  inv.vat,
  CAST(inv.amount + (inv.amount * inv.vat * 0.01) AS signed) AS total_amount, 
  inv.type, 
  inv.issued_at, 
  inv.from_date, 
  inv.until_date, 
  inv.deadline, 
  inv.currency, 
  inv.invoice_file, 
  u.first_name, 
  u.last_name, 
  u.email, 
  u.photo,
  u.phone
FROM 
  invoice inv
LEFT JOIN 
  user u 
  ON u.id = inv.user_id
WHERE 
  1
`

type GetInvoicesRow struct {
	ID          int32                `json:"id"`
	Amount      float64              `json:"amount"`
	Vat         float64              `json:"vat"`
	TotalAmount int64                `json:"total_amount"`
	Type        string               `json:"type"`
	IssuedAt    time.Time            `json:"issued_at"`
	FromDate    time.Time            `json:"from_date"`
	UntilDate   time.Time            `json:"until_date"`
	Deadline    time.Time            `json:"deadline"`
	Currency    string               `json:"currency"`
	InvoiceFile types.JSONNullString `json:"invoice_file"`
	FirstName   types.JSONNullString `json:"first_name"`
	LastName    types.JSONNullString `json:"last_name"`
	Email       types.JSONNullString `json:"email"`
	Photo       types.JSONNullString `json:"photo"`
	Phone       types.JSONNullString `json:"phone"`
}

func (q *Queries) GetInvoices(ctx context.Context) ([]GetInvoicesRow, error) {
	rows, err := q.db.QueryContext(ctx, getInvoices)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetInvoicesRow
	for rows.Next() {
		var i GetInvoicesRow
		if err := rows.Scan(
			&i.ID,
			&i.Amount,
			&i.Vat,
			&i.TotalAmount,
			&i.Type,
			&i.IssuedAt,
			&i.FromDate,
			&i.UntilDate,
			&i.Deadline,
			&i.Currency,
			&i.InvoiceFile,
			&i.FirstName,
			&i.LastName,
			&i.Email,
			&i.Photo,
			&i.Phone,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, first_name, last_name, email, phone, photo, role, password, status, created_at, updated_at FROM user WHERE email = ?
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Phone,
		&i.Photo,
		&i.Role,
		&i.Password,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, first_name, last_name, email, phone, photo, role, password, status, created_at, updated_at FROM user WHERE id = ?
`

func (q *Queries) GetUserByID(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Phone,
		&i.Photo,
		&i.Role,
		&i.Password,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const pingDB = `-- name: PingDB :one
SELECT NOW()
`

func (q *Queries) PingDB(ctx context.Context) (time.Time, error) {
	row := q.db.QueryRowContext(ctx, pingDB)
	var now time.Time
	err := row.Scan(&now)
	return now, err
}
